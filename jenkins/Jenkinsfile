def PORT_MAPPING = '';
def getBranchName() {
    return env.BRANCH_NAME.replace('origin/', '')
}

pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'devops'
    }

    parameters {
        choice(name: 'DEPLOY_ENV', choices: ['dev', 'stage', 'prod'], description: 'Select environment')
    }

    stages {
        stage('Load Port Mapping') {
            steps {
                script {
                    echo "Reading properties from: ${params.DEPLOY_ENV}"

                    def configFile = "jenkins/config/${params.DEPLOY_ENV}.properties"
                    def props = readProperties file: configFile

                    if (props.PORT_MAPPING) {
                        echo "PORT of ${params.DEPLOY_ENV} : ${props.PORT_MAPPING}"
                        PORT_MAPPING = props.PORT_MAPPING
                    } else {
                        echo "PORT_MAPPING not defined in ${configFile}"
                    }
                }
            }
        }

        stage('Run in Stage Only') {
            when {
                branch 'staging'
            }
            steps {
                echo "Running in stage only..."
            }
        }

        stage('Checkout') {
            steps {
                checkout scm
                echo 'Checking out the code...'
            }
        }

        stage('Build') {
            steps {
                script {
                    sh 'dotnet restore'
                    sh 'dotnet build --configuration Release -p:Version=1.0.0'
                    echo 'Building the application...'
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    sh 'dotnet test --no-restore --configuration Release'
                    echo 'Testing the application...'
                }
            }
        }

        stage('Dockerize') {
            steps {
                script {
                    def branchName = getBranchName()
                    def imageTag = "${env.DOCKER_IMAGE}:${branchName}"

                    def appImage = docker.build(imageTag)

                    // Stop & remove existing container safely
                    sh """
                        docker stop ${env.DOCKER_IMAGE}-${branchName} || true
                        docker rm ${env.DOCKER_IMAGE}-${branchName} || true
                    """

                    sh """
                        docker run -d -p ${PORT_MAPPING} --name ${env.DOCKER_IMAGE}-${branchName} ${imageTag}
                    """
                    echo "Dockerized application running on port ${PORT_MAPPING.split(':')[0]}"
                }
            }
        }
    }

    post {
        always {
            echo 'Build, Test, and Publish completed.'
        }
    }
}